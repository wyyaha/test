<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--配置spring的ioc,把service对象配置进来-->
    <bean id="accountService" class="com.service.AccountServiceImpl"></bean>

    <!--spring中基于xml的aop配置
    1. 把通知bean交给spring管理
    2. 用aop：config标签表明开始AOP的配置
    3. 用aop:aspect标签表明开始配置切面
        id属性： 是给切面提供一个唯一的标识
        ref属性：是指定通知类bean的id
    4. 在aop:aspect内部使用对应的标签来配置通知的类型
        前置通知: aop:before
        pointcut: 用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强

        切入点表达式的写法：
            关键字： execution(表达式)
            表达式：访问修饰符 返回值 包名.包名.包名...类名.方法名(参数列表)
                   public void com.service.AccountServiceImpl.saveAccount()
                全通配写法：
                * *..*.*(..)
                访问修饰符可以省略
                    void com.service.AccountServiceImpl.saveAccount()
                返回值可以使用通配符 *
                    * com.service.AccountServiceImpl.saveAccount()
                包名可以使用通配符，使用..表示当前包及其子包
                * *..AccountServiceImpl.saveAccount()
                类名可以使用*表示
                * *..*.saveAccount()
                参数列表
                    可以直接写数据类型
                    基本类型直接写名称
                    引用类型写包名.类名的方式         java.lang.String
                    ..表示有参数可以是任意类型
                  全通配写法
                    * *..*.*(..)

         * com.service.impl.*.*(..)

    -->
    <bean id="logger" class="com.utils.Logger"></bean>

    <aop:config>
        <!--写在aop:aspect里面只能当前切面使用,写在aop:aspect前面时后面的切面可用 -->
        <aop:pointcut id="exp" expression="execution(* *..*.*(..))"/>
        <!--配置切面-->
        <aop:aspect id="lodAdvice" ref="logger">
            <!--配置通知的类型，并且建立通知方法和切入点方法的关联-->
<!--            <aop:before method="printLog" pointcut="execution(public void com.service.AccountServiceImpl.saveAccount())"></aop:before>-->
            <!--配置前置通知，在切入点方法执行之前执行-->
<!--            <aop:before method="printLog" pointcut="execution(* *..*.*(..))"></aop:before>-->
            <aop:before method="printLog" pointcut-ref="exp"></aop:before>
            <!--配置异常通知，在切入点方法产生异常后执行-->
            <aop:after-throwing method="afterThrowPrintLog" pointcut-ref="exp"></aop:after-throwing>
            <!--配置后置通知，在切入点方法正常执行后执行-->
            <aop:after-returning method="afterPrintLog" pointcut-ref="exp"></aop:after-returning>
            <!--配置最终通知，无论切入点方法是否正常执行，它都会在它后面执行-->
            <aop:after method="finalPrintLog" pointcut-ref="exp"></aop:after>
            <aop:around method="aroundPrintLog" pointcut-ref="exp"></aop:around>
        </aop:aspect>
    </aop:config>
</beans>
